process.env.FFMPEG_PATH = require('ffmpeg-static');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, StreamType } = require('@discordjs/voice');
const googleTTS = require('google-tts-api');

module.exports = {
    name: 'voiceStateUpdate',
    async execute(oldState, newState) {
        // B·ªè qua n·∫øu kh√¥ng ph·∫£i v√†o/ra voice ho·∫∑c l√† bot
        if (oldState.channelId === newState.channelId || newState.member.user.bot) return;

        const voiceChannel = newState.channel;
        if (!voiceChannel) return;

        try {
            // üîß L·∫•y t√™n hi·ªÉn th·ªã (nickname trong server), n·∫øu kh√¥ng c√≥ th√¨ fallback v·ªÅ username
            const displayName = newState.member?.displayName || newState.member.user.username;

            // T·∫°o TTS ti·∫øng Vi·ªát
            const text = `${displayName} v·ª´a v√†o k√™nh tho·∫°i!`;
            const url = googleTTS.getAudioUrl(text, {
                lang: 'vi',
                slow: false,
                host: 'https://translate.google.com',
            });

            // K·∫øt n·ªëi v√†o voice channel
            const connection = joinVoiceChannel({
                channelId: voiceChannel.id,
                guildId: voiceChannel.guild.id,
                adapterCreator: voiceChannel.guild.voiceAdapterCreator,
                selfDeaf: false,
            });

            // Ph√°t audio TTS
            const player = createAudioPlayer();
            const resource = createAudioResource(url, { inputType: StreamType.Arbitrary });

            player.play(resource);
            connection.subscribe(player);

            player.on(AudioPlayerStatus.Idle, () => {
                connection.destroy();
            });

            console.log(`‚úÖ Ph√°t TTS cho ${displayName}`);
        } catch (error) {
            console.error('‚ùå L·ªói khi ph√°t TTS:', error);
        }
    },
};
